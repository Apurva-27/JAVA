<!--
https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Applying_styles_and_colors
-->
<!DOCTYPE html>
<html>
 <head>
  <meta charset="utf-8"/>
  <script>
	//1. drawing rectangles
	/*
	fillRect(x,y,width, hieght):-- Draws a filled rectangle.
	
	clearRect(x,y,width, hieght):-- Draws a rectangular outline.
	
	strokeRect(x,y,width, hieght):-- Clears the specified rectangular area, making it fully transparent.
	
	Each of these three functions takes the same parameters. 
	
	x and y specify the position on the canvas (relative to the origin) of the top-left corner of the rectangle. 
	
	width and height provide the rectangle's size.
	
	The fillRect() function draws a large black square 100 pixels on each side. 
	
	The clearRect() function then erases a 60x60 pixel square from the center, and then strokeRect() is called to create a rectangular outline 50x50 pixels within the cleared square.
	
	
	*/
    
	/*
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		var ctx = canvas.getContext('2d');

		ctx.fillRect(25, 25, 100, 100);
		ctx.clearRect(45, 45, 60, 60);
		ctx.strokeRect(50, 50, 50, 50);
	  }
	}
	*/
	
	//2. triangles 
	/*
	1. A path is a list of points, connected by segments of lines that can be of different shapes, curved or not, of different width and of different color. 
	 
	2. A path, or even a subpath, can be closed. 
	 
	3. To make shapes using paths takes some extra steps:

			First, you create the path.
			
			Then you use drawing commands to draw into the path.
			
			Once the path has been created, you can stroke or fill the path to render it.
	
	4. A path is a list of points, connected by segments of lines that can be of different shapes, curved or not, of different width and of different color. 
	
	5. Here are the functions used to perform these steps:

		1. beginPath()
			Creates a new path. Once created, future drawing commands are directed into the path and used to build the path up.
		
		2. Path methods
			Methods to set different paths for objects.
		
		3. closePath()
			Adds a straight line to the path, going to the start of the current sub-path.
			
		4. stroke()
			Draws the shape by stroking its outline.
		
		5. fill()
			Draws a solid shape by filling the path's content area.
			
	6. The first step to create a path is to call the beginPath(). Internally, paths are stored as a list of sub-paths (lines, arcs, etc) which together form a shape. Every time this method is called, the list is reset and we can start drawing new shapes.
	
	7. The second step is calling the methods that actually specify the paths to be drawn.
	
	8. The third, and an optional step, is to call closePath(). This method tries to close the shape by drawing a straight line from the current point to the start. If the shape has already been closed or there's only one point in the list, this function does nothing.
	
	9.  When the current path is empty, such as immediately after calling beginPath(), or on a newly created canvas, the first path construction command is always treated as a moveTo(), regardless of what it actually is. For that reason, you will almost always want to specifically set your starting position after resetting a path.
	
	10. When you call fill(), any open shapes are closed automatically, so you don't have to call closePath(). This is not the case when you call stroke().
	
	11. moveTo():--
		1. You can probably best think of this as lifting a pen or pencil from one spot on a piece of paper and placing it on the next.
		
		2. moveTo(x, y)
			Moves the pen to the coordinates specified by x and y.
		
		3. When the canvas is initialized or beginPath() is called, you typically will want to use the moveTo() function to place the starting point somewhere else. We could also use moveTo() to draw unconnected paths.
		
		
	
	12. lineTo():--
		1. For drawing straight lines, use the lineTo() method.
		
		2. lineTo(x, y)
			Draws a line from the current drawing position to the position specified by x and y.
			
		3. This method takes two arguments, x and y, which are the coordinates of the line's end point. The starting point is dependent on previously drawn paths, where the end point of the previous path is the starting point for the following, etc. The starting point can also be changed by using the moveTo() method.
	
	13. (In below example) This starts by calling beginPath() to start a new shape path. We then use the moveTo() method to move the starting point to the desired position. Below this, two lines are drawn which make up two sides of the triangle.
	
	14. You'll notice the difference between the filled and stroked triangle. This is, as mentioned above, because shapes are automatically closed when a path is filled, but not when they are stroked. If we left out the closePath() for the stroked triangle, only two lines would have been drawn, not a complete triangle.
	
	
	
	*/
	/*
	
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		var ctx = canvas.getContext('2d');

		ctx.beginPath();
		ctx.moveTo(75, 50);
		ctx.lineTo(100, 75);
		ctx.lineTo(100, 25);
		ctx.fill();
	  }
	}
	*/
	
	//3. arcs or circles 
	/*
	
	1.To draw arcs or circles, we use the arc() or arcTo() methods.

	2. arc(x, y, radius, startAngle, endAngle, anticlockwise)
	Draws an arc which is centered at (x, y) position with radius starting at startAngle and ending at endAngle going in the given direction indicated by anticlockwise (defaulting to clockwise).
	
	3. arcTo(x1, y1, x2, y2, radius)
	Draws an arc with the given control points and radius, connected to the previous point by a straight line.
	
	4. Let's have a more detailed look at the arc method, which takes six parameters: x and y are the coordinates of the center of the circle on which the arc should be drawn. radius is self-explanatory. The startAngle and endAngle parameters define the start and end points of the arc in radians, along the curve of the circle. These are measured from the x axis. The anticlockwise parameter is a Boolean value which, when true, draws the arc anticlockwise; otherwise, the arc is drawn clockwise.
	
	5. Angles in the arc function are measured in radians, not degrees. To convert degrees to radians you can use the following JavaScript expression: radians = (Math.PI/180)*degrees.
	
	6. The following example is a little more complex than the ones we've seen above. It draws 12 different arcs all with different angles and fills.

	7. The two for loops are for looping through the rows and columns of arcs. For each arc, we start a new path by calling beginPath(). In the code, each of the parameters for the arc is in a variable for clarity, but you wouldn't necessarily do that in real life.
	
	8. The x and y coordinates should be clear enough. radius and startAngle are fixed. The endAngle starts at 180 degrees (half a circle) in the first column and is increased by steps of 90 degrees, culminating in a complete circle in the last column.

	9. The statement for the clockwise parameter results in the first and third row being drawn as clockwise arcs and the second and fourth row as counterclockwise arcs. Finally, the if statement makes the top half stroked arcs and the bottom half filled arcs.

	10. This example requires a slightly larger canvas than the others on this page: 150 x 200 pixels.
	
	
	
	*/
	
	/*
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		 var ctx = canvas.getContext('2d');

		ctx.beginPath();
		
		ctx.arc(75, 75, 50, 0, Math.PI * 2, true); // Outer circle
		ctx.moveTo(110, 75);
		ctx.arc(75, 75, 35, 0, Math.PI, false);  // Mouth (clockwise)
		ctx.moveTo(65, 65);
		ctx.arc(60, 65, 5, 0, Math.PI * 2, true);  // Left eye
		ctx.moveTo(95, 65);
		ctx.arc(90, 65, 5, 0, Math.PI * 2, true);  // Right eye
		
		ctx.stroke();
	  }
	}
	*/
	
	//4. lines
	/*
	1. To draw a line using HTML5 Canvas is simple, just like draw a line on a paper, define a path, and then fill the path. See the following steps :

		1. Resets the current path using beginPath() method.
		
		2. Let move the drawing cursor to start point to create a new subpath using moveTo(x,y) method.
		
		3. Now use lineTo(x, y) method, which adds a new point and connects this point to the starting point by using a straight line.
		
		4. Both the above methods accept x and y parameters which tell it exactly where you want to draw the line.
		
		5. Finally use stroke() method to make the line visible.
	
	*/
	
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		var ctx = canvas.getContext('2d');

		// Filled triangle
		ctx.beginPath();
		ctx.moveTo(25, 25);
		ctx.lineTo(105, 25);
		ctx.lineTo(25, 105);
		ctx.fill();

		// Stroked triangle
		ctx.beginPath();
		ctx.moveTo(125, 125);
		ctx.lineTo(125, 45);
		ctx.lineTo(45, 125);
		ctx.closePath();
		ctx.stroke();
		
	  }
	}

	
	//5. Line Join
	/*
	1. lineJoin property is used to get or set the type of corner that is created when two lines join. There are three values :

		1. bevel : A filled triangle connects the two lines that are joined, creating a beveled corner.

		2. round : Lines join with a rounded corner.
		
		3. square : Default. Lines join with a smoothly mitered corner.

	*/
	
	/*
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		var ctx = canvas.getContext('2d');
		var lStart = 50;
		var lEnd = 200;
		var yStart = 20;
		ctx.beginPath();
		ctx.lineWidth = 25;
		
		// Use a bevel corner.
		ctx.lineJoin = "bevel";
		ctx.moveTo(50, 20);
		ctx.lineTo(150, 20);
		ctx.lineTo(150, 120);
		ctx.stroke();
		
		// Use a round corner.
		ctx.beginPath();
		ctx.lineJoin = "round";
		ctx.moveTo(50, 140);
		ctx.lineTo(150, 140);
		ctx.lineTo(150, 260);
		ctx.stroke();
		
		// Use a miter.
		ctx.beginPath();
		ctx.lineJoin = "miter";
		ctx.moveTo(50, 280);
		ctx.lineTo(150, 280);
		ctx.lineTo(150, 400);
		ctx.stroke();
		
	  }
	}	
	
	*/
	// 6. arcs
	
	/*
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		var ctx = canvas.getContext('2d');

		for (var i = 0; i < 4; i++) {
		  for (var j = 0; j < 3; j++) {
			ctx.beginPath();
			var x = 25 + j * 50; // x coordinate
			var y = 25 + i * 50; // y coordinate
			var radius = 20; // Arc radius
			var startAngle = 0; // Starting point on circle
			var endAngle = Math.PI + (Math.PI * j) / 2; // End point on circle
			var anticlockwise = i % 2 !== 0; // clockwise or anticlockwise

			ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);

			if (i > 1) {
			  ctx.fill();
			} else {
			  ctx.stroke();
			}
		  }
		}
	  }
	}
	*/
	
	
	//6. quadratic curves
	
	/*
	
	1. The next type of paths available are Bézier curves, available in both cubic and quadratic varieties. 
	
	2. These are generally used to draw complex organic shapes.
	
	3. quadraticCurveTo(cp1x, cp1y, x, y)
	Draws a quadratic Bézier curve from the current pen position to the end point specified by x and y, using the control point specified by cp1x and cp1y.
	
	4. bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)
	Draws a cubic Bézier curve from the current pen position to the end point specified by x and y, using the control points specified by (cp1x, cp1y) and (cp2x, cp2y).
	
	5. The difference between these can best be described using the image on the right. 
	
	6. A quadratic Bézier curve has a start and an end point (blue dots) and just one control point (indicated by the red dot) while a cubic Bézier curve uses two control points.
	
	7. The x and y parameters in both of these methods are the coordinates of the end point. cp1x and cp1y are the coordinates of the first control point, and cp2x and cp2y are the coordinates of the second control point.
	
	8. Using quadratic and cubic Bézier curves can be quite challenging, because unlike vector drawing software like Adobe Illustrator, we don't have direct visual feedback as to what we're doing. 
	
	9. This makes it pretty hard to draw complex shapes. 
	
	10. There's nothing very difficult in these examples. In both cases we see a succession of curves being drawn which finally result in a complete shape.
	
	
	*/
	
	/*
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		var ctx = canvas.getContext('2d');

		// Quadratric curves example
		ctx.beginPath();
		ctx.moveTo(75, 25);
		ctx.quadraticCurveTo(25, 25, 25, 62.5);
		ctx.quadraticCurveTo(25, 100, 50, 100);
		ctx.quadraticCurveTo(50, 120, 30, 125);
		ctx.quadraticCurveTo(60, 120, 65, 100);
		ctx.quadraticCurveTo(125, 100, 125, 62.5);
		ctx.quadraticCurveTo(125, 25, 75, 25);
		ctx.stroke();
	  }
	}
	*/
	
	//7. bezier curves
	/*
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		var ctx = canvas.getContext('2d');

		// Cubic curves example
		ctx.beginPath();
		ctx.moveTo(75, 40);
		ctx.bezierCurveTo(75, 37, 70, 25, 50, 25);
		ctx.bezierCurveTo(20, 25, 20, 62.5, 20, 62.5);
		ctx.bezierCurveTo(20, 80, 40, 102, 75, 120);
		ctx.bezierCurveTo(110, 102, 130, 80, 130, 62.5);
		ctx.bezierCurveTo(130, 62.5, 130, 25, 100, 25);
		ctx.bezierCurveTo(85, 25, 75, 37, 75, 40);
		ctx.fill();
	  }
	}
	*/
	
	//8. all type of shapes example
	/*
	function draw() {
	  var canvas = document.getElementById('canvas');
	  if (canvas.getContext) {
		var ctx = canvas.getContext('2d');

		roundedRect(ctx, 12, 12, 150, 150, 15);
		roundedRect(ctx, 19, 19, 150, 150, 9);
		roundedRect(ctx, 53, 53, 49, 33, 10);
		roundedRect(ctx, 53, 119, 49, 16, 6);
		roundedRect(ctx, 135, 53, 49, 33, 10);
		roundedRect(ctx, 135, 119, 25, 49, 10);

		ctx.beginPath();
		ctx.arc(37, 37, 13, Math.PI / 7, -Math.PI / 7, false);
		ctx.lineTo(31, 37);
		ctx.fill();

		for (var i = 0; i < 8; i++) {
		  ctx.fillRect(51 + i * 16, 35, 4, 4);
		}

		for (i = 0; i < 6; i++) {
		  ctx.fillRect(115, 51 + i * 16, 4, 4);
		}

		for (i = 0; i < 8; i++) {
		  ctx.fillRect(51 + i * 16, 99, 4, 4);
		}

		ctx.beginPath();
		ctx.moveTo(83, 116);
		ctx.lineTo(83, 102);
		ctx.bezierCurveTo(83, 94, 89, 88, 97, 88);
		ctx.bezierCurveTo(105, 88, 111, 94, 111, 102);
		ctx.lineTo(111, 116);
		ctx.lineTo(106.333, 111.333);
		ctx.lineTo(101.666, 116);
		ctx.lineTo(97, 111.333);
		ctx.lineTo(92.333, 116);
		ctx.lineTo(87.666, 111.333);
		ctx.lineTo(83, 116);
		ctx.fill();

		ctx.fillStyle = 'white';
		ctx.beginPath();
		ctx.moveTo(91, 96);
		ctx.bezierCurveTo(88, 96, 87, 99, 87, 101);
		ctx.bezierCurveTo(87, 103, 88, 106, 91, 106);
		ctx.bezierCurveTo(94, 106, 95, 103, 95, 101);
		ctx.bezierCurveTo(95, 99, 94, 96, 91, 96);
		ctx.moveTo(103, 96);
		ctx.bezierCurveTo(100, 96, 99, 99, 99, 101);
		ctx.bezierCurveTo(99, 103, 100, 106, 103, 106);
		ctx.bezierCurveTo(106, 106, 107, 103, 107, 101);
		ctx.bezierCurveTo(107, 99, 106, 96, 103, 96);
		ctx.fill();

		ctx.fillStyle = 'black';
		ctx.beginPath();
		ctx.arc(101, 102, 2, 0, Math.PI * 2, true);
		ctx.fill();

		ctx.beginPath();
		ctx.arc(89, 102, 2, 0, Math.PI * 2, true);
		ctx.fill();
	  }
	}

	// A utility function to draw a rectangle with rounded corners.

	function roundedRect(ctx, x, y, width, height, radius) {
	  ctx.beginPath();
	  ctx.moveTo(x, y + radius);
	  ctx.lineTo(x, y + height - radius);
	  ctx.arcTo(x, y + height, x + radius, y + height, radius);
	  ctx.lineTo(x + width - radius, y + height);
	  ctx.arcTo(x + width, y + height, x + width, y + height-radius, radius);
	  ctx.lineTo(x + width, y + radius);
	  ctx.arcTo(x + width, y, x + width - radius, y, radius);
	  ctx.lineTo(x + radius, y);
	  ctx.arcTo(x, y, x, y + radius, radius);
	  ctx.stroke();
	}
	*/
  </script>
 </head>
 <body onload="draw();">
   <canvas id="canvas" width="150" height="200"></canvas>
 </body>
</html>